name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: mips
            gomips: softfloat
            suffix: mips-softfloat
          - goos: linux
            goarch: mips
            gomips: hardfloat
            suffix: mips-hardfloat
          - goos: linux
            goarch: mipsle
            gomips: softfloat
            suffix: mipsle-softfloat
          - goos: linux
            goarch: mipsle
            gomips: hardfloat
            suffix: mipsle-hardfloat

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOMIPS: ${{ matrix.gomips }}
      run: |
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
          -o xray-telegram-manager-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }} .

    - name: Compress binary with UPX
      run: |
        # Install UPX for binary compression
        wget -q https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-amd64_linux.tar.xz
        tar -xf upx-4.2.1-amd64_linux.tar.xz
        sudo mv upx-4.2.1-amd64_linux/upx /usr/local/bin/
        
        # Compress the binary (skip if compression fails)
        upx --best --lzma xray-telegram-manager-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }} || echo "UPX compression failed, continuing with uncompressed binary"

    - name: Generate checksums
      run: |
        sha256sum xray-telegram-manager-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }} > xray-telegram-manager-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}.sha256
        md5sum xray-telegram-manager-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }} > xray-telegram-manager-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}.md5

    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets-${{ matrix.suffix }}
        path: |
          xray-telegram-manager-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}
          xray-telegram-manager-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}.sha256
          xray-telegram-manager-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}.md5

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate release notes
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "" >> release_notes.md
          echo "First release of Xray Telegram Manager for Keenetic routers." >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Supported Architectures" >> release_notes.md
        echo "- MIPS softfloat (most Keenetic routers)" >> release_notes.md
        echo "- MIPS hardfloat" >> release_notes.md
        echo "- MIPSLE softfloat" >> release_notes.md
        echo "- MIPSLE hardfloat" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "1. Download the appropriate binary for your router architecture" >> release_notes.md
        echo "2. Verify the checksum using the provided .sha256 file" >> release_notes.md
        echo "3. Follow the installation instructions in the README.md" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Checksums" >> release_notes.md
        echo "All binaries include SHA256 and MD5 checksums for verification." >> release_notes.md

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: release-assets

    - name: Prepare release assets
      run: |
        mkdir -p final-assets
        find release-assets -type f -name "xray-telegram-manager-*" -exec cp {} final-assets/ \;
        
        # Create a combined checksums file
        cd final-assets
        echo "# SHA256 Checksums" > CHECKSUMS.txt
        cat *.sha256 >> CHECKSUMS.txt
        echo "" >> CHECKSUMS.txt
        echo "# MD5 Checksums" >> CHECKSUMS.txt
        cat *.md5 >> CHECKSUMS.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
        files: |
          final-assets/*
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release Summary
      run: |
        echo "## Release ${{ steps.version.outputs.VERSION }} Created Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Binaries Built:" >> $GITHUB_STEP_SUMMARY
        echo "- xray-telegram-manager-${{ steps.version.outputs.VERSION }}-mips-softfloat" >> $GITHUB_STEP_SUMMARY
        echo "- xray-telegram-manager-${{ steps.version.outputs.VERSION }}-mips-hardfloat" >> $GITHUB_STEP_SUMMARY
        echo "- xray-telegram-manager-${{ steps.version.outputs.VERSION }}-mipsle-softfloat" >> $GITHUB_STEP_SUMMARY
        echo "- xray-telegram-manager-${{ steps.version.outputs.VERSION }}-mipsle-hardfloat" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security:" >> $GITHUB_STEP_SUMMARY
        echo "- SHA256 and MD5 checksums generated for all binaries" >> $GITHUB_STEP_SUMMARY
        echo "- Combined CHECKSUMS.txt file included in release" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Optimization:" >> $GITHUB_STEP_SUMMARY
        echo "- All binaries compressed with UPX for minimal size" >> $GITHUB_STEP_SUMMARY
        echo "- Build flags: -ldflags=\"-s -w\" for stripped binaries" >> $GITHUB_STEP_SUMMARY